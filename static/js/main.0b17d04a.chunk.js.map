{"version":3,"sources":["components/ProductsList/ProductsList.jsx","components/CurrentProduct/CurrentProduct.jsx","App.jsx","index.js"],"names":["ProductsList","products","setselectedProductId","setProductInfo","setProductSelected","className","map","product","imageUrl","id","name","count","size","weight","comments","key","border","colSpan","src","alt","scope","width","height","coment","type","onClick","CurrentProduct","productInfo","changeCurentProductsInList","useState","imageUrlEditingInfo","setImageUrlEditingInfo","idEditingInfo","setIdEditingInfo","nameEditingInfo","setNameEditingInfo","countEditingInfo","setCountEditingInfo","sizeWidthEditingInfo","setSizeWidthEditingInfo","sizeHeightEditingInfo","setSizeHeightEditingInfo","weightEditingInfo","setWeightEditingInfo","newProductToList","setNewProductToList","useEffect","undefined","onSubmit","event","preventDefault","required","onChange","target","value","placeholder","description","App","setProducts","setComments","commentForProduct","setCommentsForProduct","selectedProductId","productSelected","getAllProducts","a","fetch","then","response","json","result","data","searchResult","getAllComments","Promise","all","console","log","productComments","filter","comment","productId","productsSortBy","sortBy","prevproducts","sort","prevProduct","nextProduct","localeCompare","productThatChange","productThatChangeId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b17d04a.chunk.js","sourcesContent":["import React from 'react';\nimport './ProductsList.scss';\n\nexport const ProductsList = ({ products, setselectedProductId, setProductInfo, setProductSelected }) => (\n  <div className=\"ProductsList\">\n    <div className=\"ProductsList__list-container\">\n      <ul className=\"ProductsList__list\">\n        {products.map(product => {\n          const { imageUrl, id, name, count, size, weight, comments } = product;\n\n          return (\n            <div key={id} className=\"ProductsList__card\">\n              <li className=\"ProductsList__item ProductsList__item--unchecked\">\n                <table border=\"1\">\n                  <tr>\n                    <td colSpan=\"2\">\n                      <img\n                        src={imageUrl}\n                        alt={`product ${name}`}\n                        className=\"ProductsList__image\"\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"col\">Product</th>\n                    <th scope=\"col\">{name}</th>\n                  </tr>\n                  <tr>\n                    <td>count</td>\n                    <td>{count}</td>\n                  </tr>\n                  <tr>\n                    <td>size</td>\n                    <td>\n                      {size.width}\n                      x\n                      {size.height}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>weight</td>\n                    <td>{weight}</td>\n                  </tr>\n                  <tr>\n                    <td>comments</td>\n                    <td>{comments.map(coment => <span>{coment}</span>)}</td>\n                  </tr>\n                </table>\n\n                {/* <button\n                  className=\"\n                              ProductsList__user-button\n                              ProductsList__user-button--selected\n                              button\n                            \"\n                  type=\"button\"\n                >\n                  User&nbsp;#1\n                </button> */}\n              </li>\n\n              <div className=\"ProductsList__item ProductsList__item--checked\">\n\n                <button\n                  className=\"ProductsList__user-button button\"\n                  type=\"button\"\n                  onClick={() => {\n                    setProductSelected(true);\n                    setselectedProductId(id);\n                    setProductInfo(product);\n                  }}\n                >\n                  Edit &nbsp;{id}\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </ul>\n    </div>\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport './CurrentProduct.scss';\n\nexport const CurrentProduct = (\n  {\n    productInfo,\n    comments,\n    changeCurentProductsInList,\n    setselectedProductId,\n    setProductSelected,\n  },\n) => {\n  const { imageUrl, id, name, count, size, weight } = productInfo;\n\n  const [imageUrlEditingInfo, setImageUrlEditingInfo] = useState('');\n  const [idEditingInfo, setIdEditingInfo] = useState('');\n  const [nameEditingInfo, setNameEditingInfo] = useState('');\n  const [countEditingInfo, setCountEditingInfo] = useState('');\n\n  const [sizeWidthEditingInfo, setSizeWidthEditingInfo] = useState('');\n  const [sizeHeightEditingInfo, setSizeHeightEditingInfo] = useState('');\n\n  const [weightEditingInfo, setWeightEditingInfo] = useState('');\n\n  const [newProductToList, setNewProductToList] = useState({});\n\n  useEffect(() => {\n    setImageUrlEditingInfo(imageUrl);\n    setIdEditingInfo(id);\n    setNameEditingInfo(name);\n    setCountEditingInfo(count);\n\n    setSizeWidthEditingInfo(size.width);\n    setSizeHeightEditingInfo(size.height);\n\n    setWeightEditingInfo(weight);\n  }, [productInfo]);\n\n  useEffect(() => {\n    if (newProductToList.size !== undefined) {\n      changeCurentProductsInList(newProductToList, id);\n    }\n  }, [newProductToList]);\n\n  return (\n    <div className=\"ProductsList__card\">\n      <li className=\"ProductsList__item ProductsList__item--unchecked\">\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            setNewProductToList({\n              imageUrl: imageUrlEditingInfo,\n              id: idEditingInfo,\n              name: nameEditingInfo,\n              count: countEditingInfo,\n              size: {\n                width: sizeWidthEditingInfo,\n                height: sizeHeightEditingInfo,\n              },\n              weight: weightEditingInfo,\n            });\n          }}\n        >\n          <table border=\"1\">\n            <tr>\n              <td colSpan=\"2\">\n                <img\n                  src={imageUrl}\n                  alt={`product ${name}`}\n                  className=\"ProductsList__image\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"col\">Product</th>\n              <th scope=\"col\">\n                <input\n                  required\n                  type=\"text\"\n                  onChange={(event) => setNameEditingInfo(event.target.value)}\n                  value={nameEditingInfo}\n                />\n              </th>\n            </tr>\n            <tr>\n              <td>count</td>\n              <td>\n                <input\n                  required\n                  type=\"number\"\n                  onChange={event => setCountEditingInfo(event.target.value)\n                  }\n                  value={countEditingInfo}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>size</td>\n              <td>\n                <input\n                  required\n                  type=\"number\"\n                  placeholder=\"Width\"\n                  onChange={(event) => (\n                    setSizeWidthEditingInfo(event.target.value)\n                  )}\n                  value={sizeWidthEditingInfo}\n                />\n                <input\n                  required\n                  type=\"number\"\n                  placeholder=\"Height\"\n                  onChange={(event) => (\n                    setSizeHeightEditingInfo(event.target.value)\n                  )}\n                  value={sizeHeightEditingInfo}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>weight</td>\n\n              <td>\n                <input\n                  type=\"text\"\n                  onChange={(event) => setWeightEditingInfo(event.target.value)}\n                  value={weightEditingInfo}\n                />\n              </td>\n            </tr>\n          </table>\n          <div className=\"CurrentProduct__user-button-container\">\n            <button\n              className=\"\n                  ProductsList__user-button\n                  ProductsList__user-button--selected\n                  button\n                \"\n              type=\"submit\"\n            >\n              Change\n            </button>\n\n            <button\n              onClick={() => setProductSelected(false)}\n              className=\"\n                  ProductsList__user-button\n                  ProductsList__user-button--selected\n                  button\n                \"\n              type=\"button\"\n            >\n              Cancel\n            </button>\n\n          </div>\n        </form>\n        {/* <button\n      className=\"\n                  ProductsList__user-button\n                  ProductsList__user-button--selected\n                  button\n                \"\n      type=\"button\"\n    >\n      User&nbsp;#1\n    </button> */}\n      </li>\n\n      <div className=\"ProductsList__item ProductsList__item--checked\">\n        <div>\n          <h3>Comments</h3>\n          <ul>\n            {comments.map(coment => (\n              <li>{coment.description}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport { ProductsList } from './components/ProductsList';\nimport { CurrentProduct } from './components/CurrentProduct';\nimport comentsFrom from './components/api/coments.json';\nimport productsFrom from './components/api/products.json';\n\nexport const App = () => {\n  const [products, setProducts] = useState('');\n  const [comments, setComments] = useState('');\n  const [productInfo, setProductInfo] = useState(null);\n  const [commentForProduct, setCommentsForProduct] = useState(null);\n  const [selectedProductId, setselectedProductId] = useState(0);\n  const [productSelected, setProductSelected] = useState(false);\n\n  const PRODUCT_URL = 'https://api.jsonbin.io/b/610e7a3ad5667e403a3af3c8/2';\n  const COMMENT_URL = 'https://api.jsonbin.io/b/610e7bd4e1b0604017a847b0';\n\n  const getAllProducts = async() => {\n    const searchResult = await fetch(PRODUCT_URL)\n      .then(response => response.json())\n      .then(result => result.data);\n\n    setProducts(searchResult);\n  };\n\n  const getAllComments = async() => {\n    const searchResult = await fetch(COMMENT_URL)\n      .then(response => response.json())\n      .then(result => result);\n\n    setComments(searchResult);\n  };\n\n  useEffect(() => {\n    Promise.all([\n      getAllProducts(),\n      getAllComments(),\n    ]);\n    console.log('mount', selectedProductId);\n\n    return () => {\n      console.log('Unmount');\n    };\n  }, []);\n\n  useEffect(() => {\n    if (comments) {\n      const productComments = comments.filter(comment => (\n        comment.productId === selectedProductId\n      ));\n\n      setCommentsForProduct(productComments);\n    }\n    console.log('update');\n  }, [products, selectedProductId]);\n\n  const productsSortBy = (sortBy) => {\n    setProducts(prevproducts => (\n      [...prevproducts].sort((prevProduct, nextProduct) => {\n        switch (sortBy) {\n          case 'name': {\n            return nextProduct.name.localeCompare(prevProduct.name);\n          }\n\n          case 'quantity': {\n            return prevProduct.count - nextProduct.count;\n          }\n\n          case 'reverse': {\n            return prevProduct.name.localeCompare(nextProduct.name);\n          }\n\n          default: {\n            return 0;\n          }\n        }\n      })));\n  };\n\n  const changeCurentProductsInList\n  = (productThatChange, productThatChangeId) => {\n    setProducts(prevproducts => (\n      [...prevproducts].map(product => {\n        if (product.id === productThatChangeId) {\n          productThatChange.comments = product.comments;\n          setselectedProductId(0);\n          return productThatChange;\n        }\n\n        return product;\n      })));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        { products\n          ? (\n            <>\n              <button\n                className=\"\n                  App__sort-button\n                  button\n                  App__sort-button--color-prime\"\n                type=\"button\"\n                onClick={() => {\n                  productsSortBy('name');\n                }}\n              >\n                sort by name\n              </button>\n              <button\n                className=\"\n                  App__sort-button\n                  button\n                  App__sort-button--color-prime\"\n                type=\"button\"\n                onClick={() => {\n                  productsSortBy('quantity');\n                }}\n              >\n                sort by quantity\n              </button>\n              <button\n                className=\"\n                  App__sort-button\n                  button\n                  App__sort-button--color-prime\"\n                type=\"button\"\n                onClick={() => {\n                  productsSortBy('reverse');\n                }}\n              >\n                sort by name reverse\n              </button>\n            </>\n          )\n          : 'Loading...'\n        }\n        { products\n          ? (\n            <ProductsList\n              setProductSelected={setProductSelected}\n              products={products}\n              setselectedProductId={setselectedProductId}\n              setProductInfo={setProductInfo}\n            />\n          )\n          : 'Loading...'\n        }\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedProductId && productSelected && productInfo && commentForProduct ? (\n            <CurrentProduct\n              setProductSelected={setProductSelected}\n              changeCurentProductsInList={changeCurentProductsInList}\n              productInfo={productInfo}\n              comments={commentForProduct}\n            />\n          ) : 'No product selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}